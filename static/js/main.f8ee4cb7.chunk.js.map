{"version":3,"sources":["store/reducers/reducer.js","store/actions/index.js","components/CalcDisplay.js","components/CalcButton.js","components/CalcButtons.js","containers/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["initialState","displayValue","operation","firstNumber","isNumber","item","test","reducer","state","arguments","length","undefined","action","type","newState","Object","assign","payload","invOrPer","op","displayVal","parseFloat","inverseOrPercentage","toString","includes","answer","firstNum","secondNum","calculateAnswer","CalcDisplay","react_default","a","createElement","className","this","props","value","Component","CalcButton","handleClick","_this","clicked","val","orange","wide","join","trim","onClick","CalcButtons","src_components_CalcButton","Calculator","src_components_CalcDisplay","src_components_CalcButtons","onCalcButtonClicked","connect","dispatch","v","App","src_containers_Calculator","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8ee4cb7.chunk.js","sourcesContent":["import * as actionTypes from '../actions';\n\nconst initialState = {\n    displayValue: \"0\",\n    operation: '',\n    firstNumber: '',\n\n};\n\nfunction isNumber (item) {\n    return /[0-9]+/.test(item);\n}\n\nfunction calculateAnswer(firstNum, op, secondNum) {\n    switch (op) {\n        case \"+\":\n            return parseFloat(firstNum) + parseFloat(secondNum);\n        case \"-\":\n            return parseFloat(firstNum) - parseFloat(secondNum);\n        case \"x\":\n            return parseFloat(firstNum) * parseFloat(secondNum);\n        case \"/\":\n            return parseFloat(firstNum) / parseFloat(secondNum);\n        default:\n            return \"ERROR\";\n    }\n}\n\nfunction inverseOrPercentage(op, displayVal) {\n    switch (op) {\n        case \"+/-\":\n            return -parseFloat(displayVal);\n        case \"%\":\n            return parseFloat(displayVal)/100;\n        default:\n            return \"ERROR\";\n    }\n}\n\n//PSEUDOCODE\n\n//If the button is a number AND there is no operation, add it to display\n//If the button is an operation, save the display string of numbers, save the operation, **and have the display number flash once\n//If the button is another operation, replace the previously held operation (**display number flashes once)\n//If operation is saved and another number is pressed, add that to display\n//If \"=\" is pressed, calculate answer by:\n    //Converting first number string to a number,\n    //replacing operation string with corresponding math operation\n    //Converting second number string to a number\n    //Calculating the answer\n    //Display the answer\n    //Save the answer as firstNumber\n//add    +/-   .\n\n//add % and logic\n//add styles\n//refactor possibly\n//add proptypes\n\nconst reducer = ( state = initialState, action ) => {\n    switch ( action.type ) {\n        case actionTypes.TO_DISPLAY:\n            const newState = Object.assign({}, state);\n\n            //C button clears input and all state\n            if (action.payload === \"C\") {\n                newState.displayValue = \"0\";\n                newState.operation = '';\n                newState.firstNumber = '';\n                //handles +/- and % buttons\n            } else if ( action.payload === \"+/-\" || action.payload === \"%\") {\n                if (state.displayValue === \"0\") {\n                    //ignore if 0\n                    return newState;\n                } else {\n                    let invOrPer = inverseOrPercentage(action.payload, state.displayValue);\n                    newState.displayValue = invOrPer.toString();\n                } //first number typed replaces 0 on display\n            } else if ( state.displayValue === \"0\" && isNumber(action.payload) ){\n                newState.displayValue = action.payload;\n                //ignore if operation is typed before number\n            } else if (action.payload === \".\") {\n                    // ignore \".\" if the display value already has one\n                    if ( state.displayValue.includes(\".\") && state.displayValue !== state.firstNumber ) {\n                        return newState;\n                    } else if ( state.displayValue === \"0\" || state.displayValue === state.firstNumber ) {\n                        newState.displayValue = \"0.\";\n                    } else {\n                        newState.displayValue = newState.displayValue + \".\";\n                    }\n            } else if ( state.displayValue === \"0\" && !isNumber(action.payload) ) {\n                //ignore operations if pressed first\n                return newState;\n                //operation is typed while another operation already present...\n            } else if ( state.operation && !isNumber(action.payload) ) {\n                //operation is \"=\"\n                if ( action.payload === \"=\") {\n                    //if invalid, ignore\n                    if (!state.firstNumber) {\n                        return newState;\n                    } else {\n                        let answer = calculateAnswer(state.firstNumber, state.operation, state.displayValue);\n                        newState.displayValue = answer.toString();\n                        newState.firstNumber = answer.toString();\n                        newState.operation = '';\n                    }\n                } else {\n                    //operation not \"=\" so it replaces previous operation\n                    newState.operation = action.payload;\n                }\n                //number typed with operation saved,\n            } else if ( state.operation && isNumber(action.payload) ) {\n                //first number typed after operation goes to display\n                if ( state.firstNumber === state.displayValue) {\n                    newState.displayValue = action.payload;\n                } else {\n                    //displayValue gets longer\n                    newState.displayValue = state.displayValue + action.payload;\n                }\n                //operation typed with no previous operation present- save the display value, save the operation\n            } else if ( !state.operation && !isNumber(action.payload) ) {\n                newState.firstNumber = state.displayValue;\n                newState.operation = action.payload;\n            } else {\n                //displayValue getting longer\n                newState.displayValue = state.displayValue + action.payload;\n            }\n            return newState;\n    }\n    return state;\n};\n\nexport default reducer;","export const TO_DISPLAY = 'TO_DISPLAY';","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './CalcDisplay.css';\n\nclass CalcDisplay extends Component {\n    render() {\n        return (\n            <div className=\"display-component\">\n                <div>{this.props.value}</div>\n            </div>\n        );\n    }\n}\n\nCalcDisplay.propTypes = {\n  value: PropTypes.string\n};\n\nexport default CalcDisplay;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './CalcButton.css';\n\n\nclass CalcButton extends Component {\n    handleClick = () => {\n        this.props.clicked(this.props.val);\n    }\n\n    render() {\n        const className = [\n            \"calc-button-component\",\n            this.props.orange ? \"orange\" : \"\",\n            this.props.wide ? \"wide\" : \"\",\n        ];\n\n        return (\n            <div className={className.join(\" \").trim()}>\n                <button onClick={this.handleClick}>{this.props.val}</button>\n            </div>\n\n        );\n    }\n}\n\nCalcButton.propTypes = {\n    clicked: PropTypes.func,\n    val: PropTypes.string,\n    orange: PropTypes.bool,\n    wide: PropTypes.bool\n};\n\nexport default CalcButton;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport CalcButton from \"./CalcButton\";\nimport './CalcButtons.css';\n\nclass CalcButtons extends Component {\n    render() {\n        return (\n            <div className=\"calc-buttons-component\">\n                <div>\n                    <CalcButton clicked={this.props.clicked} val={\"C\"}/>\n                    <CalcButton clicked={this.props.clicked} val={\"+/-\"}/>\n                    <CalcButton clicked={this.props.clicked} val={\"%\"}/>\n                    <CalcButton clicked={this.props.clicked} val={\"/\"} orange/>\n                </div>\n                <div>\n                    <CalcButton clicked={this.props.clicked} val={\"7\"}/>\n                    <CalcButton clicked={this.props.clicked} val={\"8\"}/>\n                    <CalcButton clicked={this.props.clicked} val={\"9\"}/>\n                    <CalcButton clicked={this.props.clicked} val={\"x\"} orange/>\n                </div>\n                <div>\n                    <CalcButton clicked={this.props.clicked} val={\"4\"}/>\n                    <CalcButton clicked={this.props.clicked} val={\"5\"}/>\n                    <CalcButton clicked={this.props.clicked} val={\"6\"}/>\n                    <CalcButton clicked={this.props.clicked} val={\"-\"} orange/>\n                </div>\n                <div>\n                    <CalcButton clicked={this.props.clicked} val={\"1\"}/>\n                    <CalcButton clicked={this.props.clicked} val={\"2\"}/>\n                    <CalcButton clicked={this.props.clicked} val={\"3\"}/>\n                    <CalcButton clicked={this.props.clicked} val={\"+\"} orange/>\n                </div>\n                <div>\n                    <CalcButton clicked={this.props.clicked} val={\"0\"} wide/>\n                    <CalcButton clicked={this.props.clicked} val={\".\"}/>\n                    <CalcButton clicked={this.props.clicked} val={\"=\"} orange/>\n                </div>\n            </div>\n        );\n    }\n}\n\nCalcButtons.propTypes = {\n  clicked: PropTypes.func\n};\n\nexport default CalcButtons;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport CalcDisplay from \"../components/CalcDisplay\";\nimport CalcButtons from \"../components/CalcButtons\";\nimport * as actionTypes from '../store/actions/index';\nimport './Calculator.css';\n\nclass Calculator extends Component {\n\n    render() {\n        return (\n            <div className=\"calculator-component\">\n                <CalcDisplay value={this.props.val}/>\n                <CalcButtons clicked={this.props.onCalcButtonClicked}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        val: state.displayValue,\n        firstNum: state.firstNumber,\n        op: state.operation\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onCalcButtonClicked: (v) => dispatch({type: actionTypes.TO_DISPLAY, payload: v})\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Calculator);","import React, { Component } from 'react';\nimport Calculator from './containers/Calculator';\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app-component\">\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './store/reducers/reducer';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}